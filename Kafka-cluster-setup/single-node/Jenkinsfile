pipeline {
  agent any

  environment {
    REMOTE_HOST = "ec2-user@172.31.28.136"
    REMOTE_DIR = "/home/ec2-user/kafka-cluster"
  }

  stages {

    stage('Generate Dynamic Tag') {
      steps {
        script {
          def timestamp = sh(script: "date +%Y%m%d%H%M", returnStdout: true).trim()
          env.IMAGE_TAG = "npc-uae-kafka-single-node-${timestamp}:latest"
        }
      }
    }

    stage('Checkout Git Repo') {
      steps {
        git branch: 'main', url: 'https://github.com/Praveen-2410/Kafka-Cluster.git'
      }
    }

    stage('Inject Image Tag into File') {
      steps {
        dir('Kafka-cluster-setup') {
          script {
            def envVars = readFile('.env').split('\n')
            def nexusHostLine = envVars.find { it.startsWith('NEXUS_HOST=') }
            def nexusHost = nexusHostLine?.split('=')[-1]?.trim()
            if (!nexusHost) {
              error "NEXUS_HOST not defined in .env file!"
            }
            env.IMAGE_FULL = "${nexusHost}/uae-kafka/${env.IMAGE_TAG}"
            writeFile file: 'image-tag.txt', text: "${env.IMAGE_FULL}"
          }
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        dir('Kafka-cluster-setup') {
          sh 'docker build -t $(cat image-tag.txt) .'
        }
      }
    }

    stage('Push Image to Nexus') {
      steps {
        dir('Kafka-cluster-setup') {
          withCredentials([usernamePassword(credentialsId: 'nexus-creds-alt', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
            sh '''
              IMAGE=$(cat image-tag.txt)
              echo "$NEXUS_PASS" | docker login $(echo $IMAGE | cut -d/ -f1) -u "$NEXUS_USER" --password-stdin
              docker push $IMAGE
            '''
          }
        }
      }
    }

    stage('Distribute Files to Node') {
      steps {
        sshagent(credentials: ['ec2-ssh-key']) {
          script {
            def setupCommands = '''
              for i in 1 2 3; do
                mkdir -p $REMOTE_DIR/broker-${i}/config
                mkdir -p $REMOTE_DIR/broker-${i}/data
              done
              mkdir -p $REMOTE_DIR/shared/{certs-single-node,jaas,client-properties,scripts}
              sudo chown -R ec2-user:ec2-user $REMOTE_DIR
              sudo chmod -R 755 $REMOTE_DIR
            '''
            sh "ssh -o StrictHostKeyChecking=no $REMOTE_HOST '${setupCommands}'"

            sh """
              scp -o StrictHostKeyChecking=no \
                Kafka-cluster-setup/.env \
                Kafka-cluster-setup/image-tag.txt \
                $REMOTE_HOST:$REMOTE_DIR/

              scp -o StrictHostKeyChecking=no \
                Kafka-cluster-setup/single-node/docker-compose.single-node.yml.template \
                $REMOTE_HOST:$REMOTE_DIR/docker-compose.single-node.yml.template

              scp -o StrictHostKeyChecking=no \
                Kafka-cluster-setup/single-node/config/server.properties.template \
                $REMOTE_HOST:$REMOTE_DIR/shared/

              scp -o StrictHostKeyChecking=no -r \
                Kafka-cluster-setup/single-node/certs-single-node/* \
                $REMOTE_HOST:$REMOTE_DIR/shared/certs-single-node/

              scp -o StrictHostKeyChecking=no \
                Kafka-cluster-setup/config/kafka_jaas.conf \
                Kafka-cluster-setup/config/kafka_admin_jaas.conf \
                $REMOTE_HOST:$REMOTE_DIR/shared/jaas/

              scp -o StrictHostKeyChecking=no -r \
                Kafka-cluster-setup/config/client-properties/* \
                $REMOTE_HOST:$REMOTE_DIR/shared/client-properties/

              scp -o StrictHostKeyChecking=no \
                Kafka-cluster-setup/scripts/verify-cluster-and-setup-admin.sh \
                Kafka-cluster-setup/scripts/create_users_topic.sh \
                Kafka-cluster-setup/single-node/scripts/generate-configs-single-node.sh \
                $REMOTE_HOST:$REMOTE_DIR/shared/scripts/
            """

            sh "ssh -o StrictHostKeyChecking=no $REMOTE_HOST 'chmod +x $REMOTE_DIR/shared/scripts/*.sh && chmod 644 $REMOTE_DIR/shared/certs-single-node/*.p12'"
          }
        }
      }
    }

    stage('Generate Configs') {
      steps {
        sshagent(credentials: ['ec2-ssh-key']) {
          sh "ssh -o StrictHostKeyChecking=no $REMOTE_HOST 'cd $REMOTE_DIR && bash shared/scripts/generate-configs-single-node.sh'"
        }
      }
    }

    stage('Generate Docker Compose') {
      steps {
        sshagent(credentials: ['ec2-ssh-key']) {
          sh "ssh -o StrictHostKeyChecking=no $REMOTE_HOST 'cd $REMOTE_DIR && envsubst < docker-compose.single-node.yml.template > docker-compose.yml'"
        }
      }
    }

    stage('Format Cluster Storage') {
      steps {
        sshagent(credentials: ['ec2-ssh-key']) {
          script {
            def clusterIdCmd = '''
              ids=""
              for i in 1 2 3; do
                f="$REMOTE_DIR/broker-$i/data/meta.properties"
                if [ -f "$f" ]; then
                  id=$(grep "cluster.id=" "$f" | cut -d= -f2)
                  [ -n "$id" ] && ids+="$id,"
                fi
              done
              echo "${ids%,}"
            '''
            def clusterIds = sh(script: "ssh -o StrictHostKeyChecking=no $REMOTE_HOST '${clusterIdCmd}'", returnStdout: true).trim()
            def uniqueIds = clusterIds.tokenize(',').unique()
            def newClusterId = sh(script: "docker run --rm apache/kafka:4.0.0 /opt/kafka/bin/kafka-storage.sh random-uuid", returnStdout: true).trim()

            if (uniqueIds.size() > 1) {
              echo "Multiple cluster IDs found. Backing up data and formatting all brokers with ID: ${newClusterId}"
              for (i in 1..3) {
                sh """
                  ssh -o StrictHostKeyChecking=no $REMOTE_HOST '
                    mv $REMOTE_DIR/broker-${i}/data $REMOTE_DIR/broker-${i}/data_backup_\$(date +%s) || true
                    mkdir -p $REMOTE_DIR/broker-${i}/data
                    docker run --rm \
                      -v $REMOTE_DIR/broker-${i}/config/server.properties:/opt/kafka/config/kraft/server.properties \
                      -v $REMOTE_DIR/broker-${i}/data:/var/lib/kafka/data \
                      apache/kafka:4.0.0 \
                      /opt/kafka/bin/kafka-storage.sh format -t ${newClusterId} -c /opt/kafka/config/kraft/server.properties
                  '
                """
              }
            } else {
              echo "Single or no cluster ID. Formatting brokers with ID: ${newClusterId}"
              for (i in 1..3) {
                sh """
                  ssh -o StrictHostKeyChecking=no $REMOTE_HOST '
                    docker run --rm \
                      -v $REMOTE_DIR/broker-${i}/config/server.properties:/opt/kafka/config/kraft/server.properties \
                      -v $REMOTE_DIR/broker-${i}/data:/var/lib/kafka/data \
                      apache/kafka:4.0.0 \
                      /opt/kafka/bin/kafka-storage.sh format -t ${newClusterId} -c /opt/kafka/config/kraft/server.properties
                  '
                """
              }
            }
          }
        }
      }
    }

    stage('Start Kafka Brokers') {
      steps {
        sshagent(credentials: ['ec2-ssh-key']) {
          withCredentials([usernamePassword(credentialsId: 'nexus-creds-alt', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
            sh """
              ssh -o StrictHostKeyChecking=no $REMOTE_HOST '
                IMAGE=\$(cat $REMOTE_DIR/image-tag.txt)
                REGISTRY=\$(echo \$IMAGE | cut -d/ -f1)
                echo "\$NEXUS_PASS" | docker login \$REGISTRY -u "\$NEXUS_USER" --password-stdin
                cd $REMOTE_DIR
                docker-compose -f docker-compose.yml up -d
              '
            """
          }
        }
      }
    }

    stage('Verify Cluster & Setup Admin') {
      steps {
        sshagent(credentials: ['ec2-ssh-key']) {
          sh "ssh -o StrictHostKeyChecking=no $REMOTE_HOST 'cd $REMOTE_DIR && bash shared/scripts/verify-cluster-and-setup-admin.sh'"
        }
      }
    }

    stage('Create Topics & ACLs') {
      steps {
        sshagent(credentials: ['ec2-ssh-key']) {
          sh "ssh -o StrictHostKeyChecking=no $REMOTE_HOST 'cd $REMOTE_DIR && bash shared/scripts/create_users_topic.sh'"
        }
      }
    }

  }
}
