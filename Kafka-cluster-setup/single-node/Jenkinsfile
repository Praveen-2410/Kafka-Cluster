pipeline {
  agent any

  environment {
    REMOTE_HOST = "ec2-user@172.31.28.136"
    REMOTE_DIR = "/home/ec2-user/kafka-cluster"
  }

  stages {

    stage('Generate Dynamic Tag') {
      steps {
        script {
          def timestamp = sh(script: "date +%Y%m%d%H%M", returnStdout: true).trim()
          env.IMAGE_TAG = "npc-uae-kafka-single-node-${timestamp}:latest"
        }
      }
    }

    stage('Checkout Git Repo') {
      steps {
        git branch: 'main', url: 'https://github.com/Praveen-2410/Kafka-Cluster.git'
      }
    }

    stage('Inject Image Tag into File') {
      steps {
        dir('Kafka-cluster-setup') {
          script {
            def envVars = readFile('.env').split('\n')
            def nexusHostLine = envVars.find { it.startsWith('NEXUS_HOST=') }
            def nexusHost = nexusHostLine?.split('=')[-1]?.trim()

            if (!nexusHost) {
              error "NEXUS_HOST not defined in .env file!"
            }

            env.IMAGE_FULL = "${nexusHost}/uae-kafka/${env.IMAGE_TAG}"
            echo "Using image: ${env.IMAGE_FULL}"
            writeFile file: 'image-tag.txt', text: "${env.IMAGE_FULL}"
          }
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        dir('Kafka-cluster-setup') {
          sh 'docker build -t $(cat image-tag.txt) .'
        }
      }
    }

    stage('Push Image to Nexus') {
      steps {
        dir('Kafka-cluster-setup') {
          withCredentials([usernamePassword(credentialsId: 'nexus-creds-alt', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
            sh '''
              IMAGE=$(cat image-tag.txt)
              echo "$NEXUS_PASS" | docker login $(echo $IMAGE | cut -d/ -f1) -u "$NEXUS_USER" --password-stdin
              docker push $IMAGE
            '''
          }
        }
      }
    }

 stage('Distribute Files to Remote Node') {
  steps {
    sshagent(credentials: ['ec2-ssh-key']) {
      sh """
        ssh -o StrictHostKeyChecking=no $REMOTE_HOST '
          BASE_DIR="$REMOTE_DIR"
          for i in 1 2 3; do
            mkdir -p "\$BASE_DIR/broker-\$i/config"
            mkdir -p "\$BASE_DIR/broker-\$i/data"
          done
          mkdir -p "\$BASE_DIR/shared/certs-single-node"
          mkdir -p "\$BASE_DIR/shared/jaas"
          mkdir -p "\$BASE_DIR/shared/client-properties"
          mkdir -p "\$BASE_DIR/shared/scripts"
          chmod -R 755 \$BASE_DIR
        '

        # Copy root-level files
        scp -o StrictHostKeyChecking=no \
          Kafka-cluster-setup/.env \
          Kafka-cluster-setup/image-tag.txt \
          $REMOTE_HOST:$REMOTE_DIR/

        # Copy certs
        scp -o StrictHostKeyChecking=no \
          Kafka-cluster-setup/single-node/certs-single-node/broker.p12 \
          Kafka-cluster-setup/single-node/certs-single-node/ca-truststore.p12 \
          $REMOTE_HOST:$REMOTE_DIR/shared/certs-single-node/

        # Copy JAAS configs
        scp -o StrictHostKeyChecking=no \
          Kafka-cluster-setup/config/kafka_jaas.conf \
          Kafka-cluster-setup/config/kafka_admin_jaas.conf \
          $REMOTE_HOST:$REMOTE_DIR/shared/jaas/

        # Copy client-properties
        scp -o StrictHostKeyChecking=no \
          Kafka-cluster-setup/config/client-ssl.properties \
          Kafka-cluster-setup/config/client-properties/admin.properties \
          $REMOTE_HOST:$REMOTE_DIR/shared/client-properties/

        # Copy scripts
        scp -o StrictHostKeyChecking=no \
          Kafka-cluster-setup/single-node/scripts/generate-configs-single-node.sh \
          Kafka-cluster-setup/scripts/verify-cluster-and-setup-admin.sh \
          Kafka-cluster-setup/scripts/create_users_topic.sh \
          $REMOTE_HOST:$REMOTE_DIR/shared/scripts/

        # Copy server.properties.template
        scp -o StrictHostKeyChecking=no \
          Kafka-cluster-setup/single-node/config/server.properties.template \
          Kafka-cluster-setup/single-node/docker-compose.single-node.yml.template \
          $REMOTE_HOST:$REMOTE_DIR/shared/
        
        ssh -o StrictHostKeyChecking=no $REMOTE_HOST '
          chmod 644 $REMOTE_DIR/shared/certs-single-node/*.p12
        '
      """
    }
  }
}

    stage('Generate Broker Configs') {
      steps {
        sshagent(credentials: ['ec2-ssh-key']) {
          sh "ssh -o StrictHostKeyChecking=no $REMOTE_HOST 'cd $REMOTE_DIR && bash shared/scripts/generate-configs-single-node.sh'"
        }
      }
    }

    stage('Cluster ID Setup + Format') {
      steps {
        sshagent(credentials: ['ec2-ssh-key']) {
          script {
            def clusterIds = []
            for (int i = 1; i <= 3; i++) {
              def id = sh(
                script: "ssh -o StrictHostKeyChecking=no $REMOTE_HOST 'grep cluster.id $REMOTE_DIR/broker-${i}/data/meta.properties | cut -d= -f2 || true'",
                returnStdout: true
              ).trim()
              clusterIds.add(id ?: '')
            }

            def uniqueIds = clusterIds.findAll { it }.unique()
            if (uniqueIds.size() == 1) {
              echo "All brokers already formatted with cluster ID: ${uniqueIds[0]}"
              return
            }

            if (uniqueIds.size() > 1) {
              echo "Mismatched cluster IDs found. Backing up and cleaning..."
              def timestamp = sh(script: "date +%Y%m%d%H%M%S", returnStdout: true).trim()
              for (int i = 1; i <= 3; i++) {
                sh "ssh -o StrictHostKeyChecking=no $REMOTE_HOST 'mkdir -p $REMOTE_DIR/broker-${i}/data-backup-${timestamp} && cp -r $REMOTE_DIR/broker-${i}/data/* $REMOTE_DIR/broker-${i}/data-backup-${timestamp}/ && rm -rf $REMOTE_DIR/broker-${i}/data/*'"
              }
            }

            sh 'docker pull apache/kafka:4.0.0'
            def clusterId = sh(script: "docker run --rm apache/kafka:4.0.0 /opt/kafka/bin/kafka-storage.sh random-uuid", returnStdout: true).trim()
            echo "Generated Cluster ID: ${clusterId}"

            for (int i = 1; i <= 3; i++) {
              sh """
                ssh -o StrictHostKeyChecking=no $REMOTE_HOST '
                  sudo docker run --rm \
                    -v $REMOTE_DIR/broker-${i}/config/server.properties:/opt/kafka/config/kraft/server.properties \
                    -v $REMOTE_DIR/broker-${i}/data:/var/lib/kafka/data \
                    apache/kafka:4.0.0 \
                    /opt/kafka/bin/kafka-storage.sh format -t $clusterId -c /opt/kafka/config/kraft/server.properties
                '
              """
            }
          }
        }
      }
    }

stage('Start Kafka Containers') {
  steps {
    sshagent(credentials: ['ec2-ssh-key']) {
      withCredentials([usernamePassword(credentialsId: 'nexus-creds-alt', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
        script {
          sh """#!/bin/bash
ssh -o StrictHostKeyChecking=no \$REMOTE_HOST <<EOF
set -e

REMOTE_DIR="/home/ec2-user/kafka-cluster"

IMAGE=\$(cat \$REMOTE_DIR/image-tag.txt)
REGISTRY=\$(echo \$IMAGE | cut -d/ -f1)

echo "${NEXUS_PASS}" | docker login \$REGISTRY -u "${NEXUS_USER}" --password-stdin

cd \$REMOTE_DIR

docker-compose -f docker-compose.yml up -d
EOF
"""
        }
      }
    }
  }
}



    stage('Verify Cluster & Create Admin User') {
      steps {
        sshagent(credentials: ['ec2-ssh-key']) {
          sh "ssh -o StrictHostKeyChecking=no $REMOTE_HOST 'cd $REMOTE_DIR && bash shared/scripts/verify-cluster-and-setup-admin.sh'"
        }
      }
    }

    stage('Create Topics, Users & ACLs') {
      steps {
        sshagent(credentials: ['ec2-ssh-key']) {
          sh "ssh -o StrictHostKeyChecking=no $REMOTE_HOST 'cd $REMOTE_DIR && bash shared/scripts/create_users_topic.sh'"
        }
      }
    }
  }
}
