pipeline {
  agent any

  environment {
    REMOTE_DIR = "/home/ec2-user/kafka-cluster"
    NODE1 = "ec2-user@172.31.24.96"
    NODE2 = "ec2-user@172.31.30.30"
    NODE3 = "ec2-user@172.31.24.181"
  }

  stages {

    stage('Generate Dynamic Tag') {
      steps {
        script {
          def timestamp = sh(script: "date +%Y%m%d%H%M", returnStdout: true).trim()
          env.IMAGE_TAG = "npc-uae-kafka-${timestamp}:latest"
        }
      }
    }

    stage('Checkout Git Repo') {
      steps {
        git branch: 'main', url: 'https://github.com/Praveen-2410/Kafka-Cluster.git'
      }
    }

    stage('Inject Image Tag into File') {
      steps {
        dir('Kafka-Cluster/Multi-Node') {
          script {
            def envVars = readFile('../.env').split('\n')
            def nexusHostLine = envVars.find { it.startsWith('NEXUS_HOST=') }
            def nexusHost = nexusHostLine?.split('=')[-1]?.trim()

            if (!nexusHost) {
              error "NEXUS_HOST not defined in .env file!"
            }

            env.IMAGE_FULL = "${nexusHost}/uae-kafka/${env.IMAGE_TAG}"
            echo "Using image: ${env.IMAGE_FULL}"
            writeFile file: 'image-tag.txt', text: "${env.IMAGE_FULL}"
          }
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        dir('Kafka-Cluster/Multi-Node') {
          sh 'docker build -t $(cat image-tag.txt) .'
        }
      }
    }

    stage('Push Image to Nexus') {
      steps {
        dir('Kafka-Cluster/Multi-Node') {
          withCredentials([usernamePassword(credentialsId: 'nexus-creds-alt', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
            sh '''
              IMAGE=$(cat image-tag.txt)
              echo "$NEXUS_PASS" | docker login $(echo $IMAGE | cut -d/ -f1) -u "$NEXUS_USER" --password-stdin
              docker push $IMAGE
            '''
          }
        }
      }
    }

stage('Distribute Files to All Nodes') {
  steps {
    sshagent(credentials: ['ec2-ssh-key']) {
      script {
        def nodes = [env.NODE1, env.NODE2, env.NODE3]
        for (node in nodes) {
          sh """
            ssh -o StrictHostKeyChecking=no ${node} '
              BASE_DIR="${REMOTE_DIR}"

              if [ -d "\$BASE_DIR" ]; then
                sudo chown -R ec2-user:ec2-user "\$BASE_DIR"
              fi

              mkdir -p "\$BASE_DIR/data"
              mkdir -p "\$BASE_DIR/config/certs"
              mkdir -p "\$BASE_DIR/config/client-properties"
              mkdir -p "\$BASE_DIR/scripts"
              chmod -R 755 "\$BASE_DIR"
            '

            # Copy core files
            scp -o StrictHostKeyChecking=no \
              Kafka-Cluster/.env \
              Kafka-Cluster/Multi-Node/image-tag.txt \
              Kafka-Cluster/Multi-Node/docker-compose.yml.template \
              ${node}:${REMOTE_DIR}/

            # Copy server properties
            scp -o StrictHostKeyChecking=no \
              Kafka-Cluster/Multi-Node/config/server.properties.template \
              ${node}:${REMOTE_DIR}/config/

            # Copy JAAS config files
            scp -o StrictHostKeyChecking=no \
              Kafka-Cluster/Multi-Node/config/kafka_jaas.conf \
              Kafka-Cluster/Multi-Node/config/kafka_admin_jaas.conf \
              ${node}:${REMOTE_DIR}/config/

            # Copy client SSL and admin props
            scp -o StrictHostKeyChecking=no \
              Kafka-Cluster/Multi-Node/config/client-properties/client-ssl.properties \
              Kafka-Cluster/Multi-Node/config/client-properties/admin.properties \
              ${node}:${REMOTE_DIR}/config/client-properties/

            # Copy certificate files
            scp -o StrictHostKeyChecking=no \
              Kafka-Cluster/Multi-Node/config/multi-node-certs/*.p12 \
              ${node}:${REMOTE_DIR}/config/certs/

            # Copy scripts
            scp -o StrictHostKeyChecking=no \
              Kafka-Cluster/Multi-Node/scripts/* \
              ${node}:${REMOTE_DIR}/scripts/

            # Set permissions
            ssh -o StrictHostKeyChecking=no ${node} '
              chmod 644 $REMOTE_DIR/config/certs/*.p12
              chmod +x $REMOTE_DIR/scripts/*.sh
            '
          """
        }
      }
    }
  }
}

    stage('Generate Configs (envsubst)') {
      steps {
        sshagent(credentials: ['ec2-ssh-key']) {
          sh "ssh -o StrictHostKeyChecking=no $NODE1 'cd $REMOTE_DIR && bash scripts/generate-configs.sh 1'"
          sh "ssh -o StrictHostKeyChecking=no $NODE2 'cd $REMOTE_DIR && bash scripts/generate-configs.sh 2'"
          sh "ssh -o StrictHostKeyChecking=no $NODE3 'cd $REMOTE_DIR && bash scripts/generate-configs.sh 3'"
        }
      }
    }

    stage('Cluster ID Setup + Format') {
      steps {
        sshagent(credentials: ['ec2-ssh-key']) {
          script {
            def nodes = [env.NODE1, env.NODE2, env.NODE3]
            def existingClusterIds = []

            for (node in nodes) {
              def id = sh(
                script: "ssh -o StrictHostKeyChecking=no $node 'grep cluster.id $REMOTE_DIR/data/meta.properties | cut -d= -f2 || true'",
                returnStdout: true
              ).trim()
              existingClusterIds.add(id ?: '')
            }

            def uniqueIds = existingClusterIds.findAll { it }.unique()
            if (uniqueIds.size() == 1) {
              echo "All brokers already formatted with cluster ID: ${uniqueIds[0]}"
              return
            }

            if (uniqueIds.size() > 1) {
              echo "Mismatched cluster IDs found. Backing up and cleaning..."
              def timestamp = sh(script: "date +%Y%m%d%H%M%S", returnStdout: true).trim()
              for (node in nodes) {
                sh "ssh -o StrictHostKeyChecking=no $node 'mkdir -p $REMOTE_DIR/data-dir-backup-${timestamp} && cp -r $REMOTE_DIR/data/* $REMOTE_DIR/data-dir-backup-${timestamp}/ && rm -rf $REMOTE_DIR/data/*'"
              }
            }

            sh 'docker pull apache/kafka:4.0.0'
            def clusterId = sh(script: "docker run --rm apache/kafka:4.0.0 /opt/kafka/bin/kafka-storage.sh random-uuid", returnStdout: true).trim()
            echo "Generated Cluster ID: ${clusterId}"

            for (node in nodes) {
              sh """
                ssh -o StrictHostKeyChecking=no $node '
                  docker run --rm \
                    -v $REMOTE_DIR/config/server.properties:/opt/kafka/config/kraft/server.properties \
                    -v $REMOTE_DIR/data:/var/lib/kafka/data \
                    apache/kafka:4.0.0 \
                    /opt/kafka/bin/kafka-storage.sh format -t $clusterId -c /opt/kafka/config/kraft/server.properties
                '
              """
            }
          }
        }
      }
    }

    stage('Start Kafka Containers') {
      steps {
        sshagent(credentials: ['ec2-ssh-key']) {
          withCredentials([usernamePassword(credentialsId: 'nexus-creds-alt', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
            script {
              def nodes = [env.NODE1, env.NODE2, env.NODE3]
              for (node in nodes) {
                sh """#!/bin/bash
ssh -o StrictHostKeyChecking=no $node \\
NEXUS_USER='$NEXUS_USER' NEXUS_PASS='$NEXUS_PASS' bash -s <<'EOF'
set -e
IMAGE=\$(cat $REMOTE_DIR/image-tag.txt)
REGISTRY=\$(echo \$IMAGE | cut -d/ -f1)
echo "IMAGE: \$IMAGE"
echo "REGISTRY: \$REGISTRY"
echo "Logging in..."
echo "\$NEXUS_PASS" | docker login \$REGISTRY -u "\$NEXUS_USER" --password-stdin
cd $REMOTE_DIR
docker-compose -f docker-compose.yml up -d
EOF
"""
              }
            }
          }
        }
      }
    }

    stage('Verify Cluster & Create Admin User') {
      steps {
        sshagent(credentials: ['ec2-ssh-key']) {
          sh "ssh -o StrictHostKeyChecking=no $NODE1 'cd $REMOTE_DIR && bash scripts/verify-cluster-and-setup-admin.sh'"
        }
      }
    }

    stage('Create Topics, Users & ACLs') {
      steps {
        sshagent(credentials: ['ec2-ssh-key']) {
          echo "Running create_users_topic.sh to create SCRAM users, topics, and ACLs..."
          sh "ssh -o StrictHostKeyChecking=no $NODE1 'cd $REMOTE_DIR && bash scripts/create_users_topic.sh'"
        }
      }
    }

stage('Deployment Summary') {
  steps {
    echo """
    Multi-Node Kafka Cluster Deployed Successfully
    """
  }
}
  }
}
